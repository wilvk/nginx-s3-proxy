server {

    listen 8000;
    access_log /dev/stdout;
    error_log /dev/stdout;

    location / {
        default_type text/html;
    }

    location ~ ^/s3/(?<bucket_resource>.*)$ {
       set_by_lua         $header_datetime        'return os.date("%a, %d %b %Y %H:%M:%S +0000")';
       set_by_lua         $aws_s3_bucket_name     'return os.getenv("AWS_S3_BUCKET_NAME")';
       set_by_lua         $aws_access_key_id      'return os.getenv("AWS_ACCESS_KEY_ID")';
       set_by_lua         $aws_secret_access_key  'return os.getenv("AWS_SECRET_ACCESS_KEY")';
       set_by_lua         $aws_security_token     'return os.getenv("AWS_SECURITY_TOKEN")';
       set_by_lua         $aws_region             'return os.getenv("AWS_REGION")';
       set_by_lua         $aws_debug              'return os.getenv("AWS_DEBUG")';
       set_by_lua_block   $aws_s3_bucket_uri      {
           return("https://s3-" .. ngx.var.aws_region .. ".amazonaws.com/" .. ngx.var.aws_s3_bucket_name )
       }

       set                $aws_debug_bucket       "http://local-capture:8000";

       set_by_lua_block   $aws_uri                {
            if os.getenv("AWS_DEBUG") == nill then
                return ngx.var.aws_s3_bucket_uri
            else
                return ngx.var.aws_debug_bucket
            end
       }

       set                $aws_resource           "${aws_s3_bucket_name}/$1";

       set_by_lua_block   $aws_signature_string   {
            return ("GET\n\n\n" .. ngx.var.header_datetime .. "\nx-amz-security-token:" .. ngx.var.aws_security_token .. "\n/" .. ngx.var.aws_resource)
        }

       set_by_lua_block   $aws_signature          {
            local sha1             = require("sha1")
            local base64           = require("base64")
            local hmac_as_binary   = sha1.hmac_binary(ngx.var.aws_secret_access_key, ngx.var.aws_signature_string)
            local hmac_base64      = base64.to_base64(hmac_as_binary)
            return hmac_base64
       }

       set_by_lua_block   $aws_authorization      {
            return("AWS " .. ngx.var.aws_access_key_id .. ":" .. ngx.var.aws_signature)
       }

      proxy_intercept_errors             on;
      proxy_set_header                   Date $header_datetime;
      proxy_set_header                   X-AMZ-Security-Token $aws_security_token;
      proxy_set_header                   Authorization $aws_authorization;
      proxy_pass                         "${aws_uri}/${bucket_resource}";
    }
}
